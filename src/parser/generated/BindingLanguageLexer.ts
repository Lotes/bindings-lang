// Generated from src/parser/BindingLanguageLexer.g4 by ANTLR 4.7.3-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class BindingLanguageLexer extends Lexer {
	public static readonly LMUSTACHE = 1;
	public static readonly TEXT = 2;
	public static readonly UNIT = 3;
	public static readonly TRUE = 4;
	public static readonly FALSE = 5;
	public static readonly NULL = 6;
	public static readonly STRING = 7;
	public static readonly RMUSTACHE = 8;
	public static readonly LPAREN = 9;
	public static readonly RPAREN = 10;
	public static readonly DOT = 11;
	public static readonly ID = 12;
	public static readonly NUMBER = 13;
	public static readonly COMMA = 14;
	public static readonly WS = 15;
	public static readonly UNKNOWN = 16;
	public static readonly WITHIN_BINDING_MODE = 1;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE", "WITHIN_BINDING_MODE",
	];

	public static readonly ruleNames: string[] = [
		"LMUSTACHE", "TEXT", "PX", "PT", "CM", "MM", "INCH", "DIGIT", "UNIT",
		"TRUE", "FALSE", "NULL", "STRING", "RMUSTACHE", "LPAREN", "RPAREN", "DOT",
		"ID", "NUMBER", "COMMA", "WS", "UNKNOWN",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'{{'", undefined, undefined, "'true'", "'false'", "'null'",
		undefined, "'}}'", "'('", "')'", "'.'", undefined, undefined, "','",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "LMUSTACHE", "TEXT", "UNIT", "TRUE", "FALSE", "NULL", "STRING",
		"RMUSTACHE", "LPAREN", "RPAREN", "DOT", "ID", "NUMBER", "COMMA", "WS",
		"UNKNOWN",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(BindingLanguageLexer._LITERAL_NAMES, BindingLanguageLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return BindingLanguageLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(BindingLanguageLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "BindingLanguageLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return BindingLanguageLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return BindingLanguageLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return BindingLanguageLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return BindingLanguageLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x12\xA0\b\x01" +
		"\b\x01\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06" +
		"\t\x06\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f" +
		"\x04\r\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04" +
		"\x12\t\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04" +
		"\x17\t\x17\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03" +
		"\x03\x03\x03\x05\x03:\n\x03\x06\x03<\n\x03\r\x03\x0E\x03=\x03\x04\x03" +
		"\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x07\x03" +
		"\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03" +
		"\n\x03\n\x03\n\x05\nX\n\n\x03\v\x03\v\x03\v\x03\v\x03\v\x03\f\x03\f\x03" +
		"\f\x03\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03" +
		"\x0E\x03\x0E\x03\x0E\x03\x0E\x07\x0Ep\n\x0E\f\x0E\x0E\x0Es\v\x0E\x03\x0E" +
		"\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x11" +
		"\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x07\x13\x84\n\x13\f\x13\x0E\x13" +
		"\x87\v\x13\x03\x14\x06\x14\x8A\n\x14\r\x14\x0E\x14\x8B\x03\x14\x03\x14" +
		"\x06\x14\x90\n\x14\r\x14\x0E\x14\x91\x05\x14\x94\n\x14\x03\x15\x03\x15" +
		"\x03\x16\x06\x16\x99\n\x16\r\x16\x0E\x16\x9A\x03\x16\x03\x16\x03\x17\x03" +
		"\x17\x02\x02\x02\x18\x04\x02\x03\x06\x02\x04\b\x02\x02\n\x02\x02\f\x02" +
		"\x02\x0E\x02\x02\x10\x02\x02\x12\x02\x02\x14\x02\x05\x16\x02\x06\x18\x02" +
		"\x07\x1A\x02\b\x1C\x02\t\x1E\x02\n \x02\v\"\x02\f$\x02\r&\x02\x0E(\x02" +
		"\x0F*\x02\x10,\x02\x11.\x02\x12\x04\x02\x03\b\x03\x02}}\x03\x022;\x03" +
		"\x02^^\x05\x02C\\aac|\x06\x022;C\\aac|\x05\x02\v\f\x0F\x0F\"\"\x02\xA7" +
		"\x02\x04\x03\x02\x02\x02\x02\x06\x03\x02\x02\x02\x03\x14\x03\x02\x02\x02" +
		"\x03\x16\x03\x02\x02\x02\x03\x18\x03\x02\x02\x02\x03\x1A\x03\x02\x02\x02" +
		"\x03\x1C\x03\x02\x02\x02\x03\x1E\x03\x02\x02\x02\x03 \x03\x02\x02\x02" +
		"\x03\"\x03\x02\x02\x02\x03$\x03\x02\x02\x02\x03&\x03\x02\x02\x02\x03(" +
		"\x03\x02\x02\x02\x03*\x03\x02\x02\x02\x03,\x03\x02\x02\x02\x03.\x03\x02" +
		"\x02\x02\x040\x03\x02\x02\x02\x06;\x03\x02\x02\x02\b?\x03\x02\x02\x02" +
		"\nB\x03\x02\x02\x02\fE\x03\x02\x02\x02\x0EH\x03\x02\x02\x02\x10K\x03\x02" +
		"\x02\x02\x12P\x03\x02\x02\x02\x14W\x03\x02\x02\x02\x16Y\x03\x02\x02\x02" +
		"\x18^\x03\x02\x02\x02\x1Ad\x03\x02\x02\x02\x1Ci\x03\x02\x02\x02\x1Ev\x03" +
		"\x02\x02\x02 {\x03\x02\x02\x02\"}\x03\x02\x02\x02$\x7F\x03\x02\x02\x02" +
		"&\x81\x03\x02\x02\x02(\x89\x03\x02\x02\x02*\x95\x03\x02\x02\x02,\x98\x03" +
		"\x02\x02\x02.\x9E\x03\x02\x02\x0201\x07}\x02\x0212\x07}\x02\x0223\x03" +
		"\x02\x02\x0234\b\x02\x02\x024\x05\x03\x02\x02\x025<\n\x02\x02\x0269\x07" +
		"}\x02\x027:\n\x02\x02\x028:\x07\x02\x02\x0397\x03\x02\x02\x0298\x03\x02" +
		"\x02\x02:<\x03\x02\x02\x02;5\x03\x02\x02\x02;6\x03\x02\x02\x02<=\x03\x02" +
		"\x02\x02=;\x03\x02\x02\x02=>\x03\x02\x02\x02>\x07\x03\x02\x02\x02?@\x07" +
		"r\x02\x02@A\x07z\x02\x02A\t\x03\x02\x02\x02BC\x07r\x02\x02CD\x07v\x02" +
		"\x02D\v\x03\x02\x02\x02EF\x07e\x02\x02FG\x07o\x02\x02G\r\x03\x02\x02\x02" +
		"HI\x07o\x02\x02IJ\x07o\x02\x02J\x0F\x03\x02\x02\x02KL\x07k\x02\x02LM\x07" +
		"p\x02\x02MN\x07e\x02\x02NO\x07j\x02\x02O\x11\x03\x02\x02\x02PQ\t\x03\x02" +
		"\x02Q\x13\x03\x02\x02\x02RX\x05\b\x04\x02SX\x05\n\x05\x02TX\x05\x0E\x07" +
		"\x02UX\x05\f\x06\x02VX\x05\x10\b\x02WR\x03\x02\x02\x02WS\x03\x02\x02\x02" +
		"WT\x03\x02\x02\x02WU\x03\x02\x02\x02WV\x03\x02\x02\x02X\x15\x03\x02\x02" +
		"\x02YZ\x07v\x02\x02Z[\x07t\x02\x02[\\\x07w\x02\x02\\]\x07g\x02\x02]\x17" +
		"\x03\x02\x02\x02^_\x07h\x02\x02_`\x07c\x02\x02`a\x07n\x02\x02ab\x07u\x02" +
		"\x02bc\x07g\x02\x02c\x19\x03\x02\x02\x02de\x07p\x02\x02ef\x07w\x02\x02" +
		"fg\x07n\x02\x02gh\x07n\x02\x02h\x1B\x03\x02\x02\x02iq\x07$\x02\x02jp\n" +
		"\x04\x02\x02kl\x07^\x02\x02lp\x07$\x02\x02mn\x07^\x02\x02np\x07^\x02\x02" +
		"oj\x03\x02\x02\x02ok\x03\x02\x02\x02om\x03\x02\x02\x02ps\x03\x02\x02\x02" +
		"qo\x03\x02\x02\x02qr\x03\x02\x02\x02rt\x03\x02\x02\x02sq\x03\x02\x02\x02" +
		"tu\x07$\x02\x02u\x1D\x03\x02\x02\x02vw\x07\x7F\x02\x02wx\x07\x7F\x02\x02" +
		"xy\x03\x02\x02\x02yz\b\x0F\x03\x02z\x1F\x03\x02\x02\x02{|\x07*\x02\x02" +
		"|!\x03\x02\x02\x02}~\x07+\x02\x02~#\x03\x02\x02\x02\x7F\x80\x070\x02\x02" +
		"\x80%\x03\x02\x02\x02\x81\x85\t\x05\x02\x02\x82\x84\t\x06\x02\x02\x83" +
		"\x82\x03\x02\x02\x02\x84\x87\x03\x02\x02\x02\x85\x83\x03\x02\x02\x02\x85" +
		"\x86\x03\x02\x02\x02\x86'\x03\x02\x02\x02\x87\x85\x03\x02\x02\x02\x88" +
		"\x8A\x05\x12\t\x02\x89\x88\x03\x02\x02\x02\x8A\x8B\x03\x02\x02\x02\x8B" +
		"\x89\x03\x02\x02\x02\x8B\x8C\x03\x02\x02\x02\x8C\x93\x03\x02\x02\x02\x8D" +
		"\x8F\x05$\x12\x02\x8E\x90\x05\x12\t\x02\x8F\x8E\x03\x02\x02\x02\x90\x91" +
		"\x03\x02\x02\x02\x91\x8F\x03\x02\x02\x02\x91\x92\x03\x02\x02\x02\x92\x94" +
		"\x03\x02\x02\x02\x93\x8D\x03\x02\x02\x02\x93\x94\x03\x02\x02\x02\x94)" +
		"\x03\x02\x02\x02\x95\x96\x07.\x02\x02\x96+\x03\x02\x02\x02\x97\x99\t\x07" +
		"\x02\x02\x98\x97\x03\x02\x02\x02\x99\x9A\x03\x02\x02\x02\x9A\x98\x03\x02" +
		"\x02\x02\x9A\x9B\x03\x02\x02\x02\x9B\x9C\x03\x02\x02\x02\x9C\x9D\b\x16" +
		"\x04\x02\x9D-\x03\x02\x02\x02\x9E\x9F\v\x02\x02\x02\x9F/\x03\x02\x02\x02" +
		"\x0F\x02\x039;=Woq\x85\x8B\x91\x93\x9A\x05\x04\x03\x02\x04\x02\x02\b\x02" +
		"\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!BindingLanguageLexer.__ATN) {
			BindingLanguageLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(BindingLanguageLexer._serializedATN));
		}

		return BindingLanguageLexer.__ATN;
	}

}

