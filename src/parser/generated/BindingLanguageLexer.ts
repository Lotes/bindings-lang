// Generated from src/parser/BindingLanguageLexer.g4 by ANTLR 4.7.3-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class BindingLanguageLexer extends Lexer {
	public static readonly LMUSTACHE = 1;
	public static readonly TEXT = 2;
	public static readonly TRUE = 3;
	public static readonly FALSE = 4;
	public static readonly NULL = 5;
	public static readonly STRING = 6;
	public static readonly RMUSTACHE = 7;
	public static readonly LPAREN = 8;
	public static readonly RPAREN = 9;
	public static readonly DOT = 10;
	public static readonly UNIT = 11;
	public static readonly PX = 12;
	public static readonly PT = 13;
	public static readonly CM = 14;
	public static readonly MM = 15;
	public static readonly INCH = 16;
	public static readonly ID = 17;
	public static readonly NUMBER = 18;
	public static readonly DIGIT = 19;
	public static readonly COMMA = 20;
	public static readonly WS = 21;
	public static readonly WITHIN_BINDING_MODE = 1;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE", "WITHIN_BINDING_MODE",
	];

	public static readonly ruleNames: string[] = [
		"LMUSTACHE", "TEXT", "TRUE", "FALSE", "NULL", "STRING", "RMUSTACHE", "LPAREN", 
		"RPAREN", "DOT", "UNIT", "PX", "PT", "CM", "MM", "INCH", "ID", "NUMBER", 
		"DIGIT", "COMMA", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'{{'", undefined, "'true'", "'false'", "'null'", undefined, 
		"'}}'", "'('", "')'", "'.'", undefined, "'px'", "'pt'", "'cm'", "'mm'", 
		"'inch'", undefined, undefined, undefined, "','",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "LMUSTACHE", "TEXT", "TRUE", "FALSE", "NULL", "STRING", "RMUSTACHE", 
		"LPAREN", "RPAREN", "DOT", "UNIT", "PX", "PT", "CM", "MM", "INCH", "ID", 
		"NUMBER", "DIGIT", "COMMA", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(BindingLanguageLexer._LITERAL_NAMES, BindingLanguageLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return BindingLanguageLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(BindingLanguageLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "BindingLanguageLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return BindingLanguageLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return BindingLanguageLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return BindingLanguageLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return BindingLanguageLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x17\x97\b\x01" +
		"\b\x01\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06" +
		"\t\x06\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f" +
		"\x04\r\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04" +
		"\x12\t\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x03" +
		"\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x06\x037" +
		"\n\x03\r\x03\x0E\x038\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x05" +
		"\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x06" +
		"\x03\x06\x03\x07\x03\x07\x03\x07\x03\x07\x05\x07O\n\x07\x03\x07\x03\x07" +
		"\x03\b\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03" +
		"\f\x03\f\x03\f\x03\f\x03\f\x05\fc\n\f\x03\r\x03\r\x03\r\x03\x0E\x03\x0E" +
		"\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11" +
		"\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x07\x12x\n\x12\f\x12\x0E\x12" +
		"{\v\x12\x03\x13\x06\x13~\n\x13\r\x13\x0E\x13\x7F\x03\x13\x03\x13\x06\x13" +
		"\x84\n\x13\r\x13\x0E\x13\x85\x05\x13\x88\n\x13\x03\x14\x03\x14\x03\x15" +
		"\x03\x15\x03\x16\x03\x16\x03\x16\x03\x16\x06\x16\x92\n\x16\r\x16\x0E\x16" +
		"\x93\x03\x16\x03\x16\x02\x02\x02\x17\x04\x02\x03\x06\x02\x04\b\x02\x05" +
		"\n\x02\x06\f\x02\x07\x0E\x02\b\x10\x02\t\x12\x02\n\x14\x02\v\x16\x02\f" +
		"\x18\x02\r\x1A\x02\x0E\x1C\x02\x0F\x1E\x02\x10 \x02\x11\"\x02\x12$\x02" +
		"\x13&\x02\x14(\x02\x15*\x02\x16,\x02\x17\x04\x02\x03\b\x03\x02}}\x04\x02" +
		"$$^^\x05\x02$$^^``\x03\x02C\\\x06\x022;C\\aac|\x03\x022;\x02\xA1\x02\x04" +
		"\x03\x02\x02\x02\x02\x06\x03\x02\x02\x02\x03\b\x03\x02\x02\x02\x03\n\x03" +
		"\x02\x02\x02\x03\f\x03\x02\x02\x02\x03\x0E\x03\x02\x02\x02\x03\x10\x03" +
		"\x02\x02\x02\x03\x12\x03\x02\x02\x02\x03\x14\x03\x02\x02\x02\x03\x16\x03" +
		"\x02\x02\x02\x03\x18\x03\x02\x02\x02\x03\x1A\x03\x02\x02\x02\x03\x1C\x03" +
		"\x02\x02\x02\x03\x1E\x03\x02\x02\x02\x03 \x03\x02\x02\x02\x03\"\x03\x02" +
		"\x02\x02\x03$\x03\x02\x02\x02\x03&\x03\x02\x02\x02\x03(\x03\x02\x02\x02" +
		"\x03*\x03\x02\x02\x02\x03,\x03\x02\x02\x02\x04.\x03\x02\x02\x02\x066\x03" +
		"\x02\x02\x02\b:\x03\x02\x02\x02\n?\x03\x02\x02\x02\fE\x03\x02\x02\x02" +
		"\x0EJ\x03\x02\x02\x02\x10R\x03\x02\x02\x02\x12W\x03\x02\x02\x02\x14Y\x03" +
		"\x02\x02\x02\x16[\x03\x02\x02\x02\x18b\x03\x02\x02\x02\x1Ad\x03\x02\x02" +
		"\x02\x1Cg\x03\x02\x02\x02\x1Ej\x03\x02\x02\x02 m\x03\x02\x02\x02\"p\x03" +
		"\x02\x02\x02$u\x03\x02\x02\x02&}\x03\x02\x02\x02(\x89\x03\x02\x02\x02" +
		"*\x8B\x03\x02\x02\x02,\x91\x03\x02\x02\x02./\x07}\x02\x02/0\x07}\x02\x02" +
		"01\x03\x02\x02\x0212\b\x02\x02\x022\x05\x03\x02\x02\x0237\n\x02\x02\x02" +
		"45\x07}\x02\x0257\n\x02\x02\x0263\x03\x02\x02\x0264\x03\x02\x02\x0278" +
		"\x03\x02\x02\x0286\x03\x02\x02\x0289\x03\x02\x02\x029\x07\x03\x02\x02" +
		"\x02:;\x07v\x02\x02;<\x07t\x02\x02<=\x07w\x02\x02=>\x07g\x02\x02>\t\x03" +
		"\x02\x02\x02?@\x07h\x02\x02@A\x07c\x02\x02AB\x07n\x02\x02BC\x07u\x02\x02" +
		"CD\x07g\x02\x02D\v\x03\x02\x02\x02EF\x07p\x02\x02FG\x07w\x02\x02GH\x07" +
		"n\x02\x02HI\x07n\x02\x02I\r\x03\x02\x02\x02JN\x07$\x02\x02KL\x07^\x02" +
		"\x02LO\t\x03\x02\x02MO\t\x04\x02\x02NK\x03\x02\x02\x02NM\x03\x02\x02\x02" +
		"OP\x03\x02\x02\x02PQ\x07$\x02\x02Q\x0F\x03\x02\x02\x02RS\x07\x7F\x02\x02" +
		"ST\x07\x7F\x02\x02TU\x03\x02\x02\x02UV\b\b\x03\x02V\x11\x03\x02\x02\x02" +
		"WX\x07*\x02\x02X\x13\x03\x02\x02\x02YZ\x07+\x02\x02Z\x15\x03\x02\x02\x02" +
		"[\\\x070\x02\x02\\\x17\x03\x02\x02\x02]c\x05\x1A\r\x02^c\x05\x1C\x0E\x02" +
		"_c\x05 \x10\x02`c\x05\x1E\x0F\x02ac\x05\"\x11\x02b]\x03\x02\x02\x02b^" +
		"\x03\x02\x02\x02b_\x03\x02\x02\x02b`\x03\x02\x02\x02ba\x03\x02\x02\x02" +
		"c\x19\x03\x02\x02\x02de\x07r\x02\x02ef\x07z\x02\x02f\x1B\x03\x02\x02\x02" +
		"gh\x07r\x02\x02hi\x07v\x02\x02i\x1D\x03\x02\x02\x02jk\x07e\x02\x02kl\x07" +
		"o\x02\x02l\x1F\x03\x02\x02\x02mn\x07o\x02\x02no\x07o\x02\x02o!\x03\x02" +
		"\x02\x02pq\x07k\x02\x02qr\x07p\x02\x02rs\x07e\x02\x02st\x07j\x02\x02t" +
		"#\x03\x02\x02\x02uy\t\x05\x02\x02vx\t\x06\x02\x02wv\x03\x02\x02\x02x{" +
		"\x03\x02\x02\x02yw\x03\x02\x02\x02yz\x03\x02\x02\x02z%\x03\x02\x02\x02" +
		"{y\x03\x02\x02\x02|~\x05(\x14\x02}|\x03\x02\x02\x02~\x7F\x03\x02\x02\x02" +
		"\x7F}\x03\x02\x02\x02\x7F\x80\x03\x02\x02\x02\x80\x87\x03\x02\x02\x02" +
		"\x81\x83\x05\x16\v\x02\x82\x84\x05(\x14\x02\x83\x82\x03\x02\x02\x02\x84" +
		"\x85\x03\x02\x02\x02\x85\x83\x03\x02\x02\x02\x85\x86\x03\x02\x02\x02\x86" +
		"\x88\x03\x02\x02\x02\x87\x81\x03\x02\x02\x02\x87\x88\x03\x02\x02\x02\x88" +
		"\'\x03\x02\x02\x02\x89\x8A\t\x07\x02\x02\x8A)\x03\x02\x02\x02\x8B\x8C" +
		"\x07.\x02\x02\x8C+\x03\x02\x02\x02\x8D\x8E\x07\"\x02\x02\x8E\x8F\x07\v" +
		"\x02\x02\x8F\x90\x07\x0F\x02\x02\x90\x92\x07\f\x02\x02\x91\x8D\x03\x02" +
		"\x02\x02\x92\x93\x03\x02\x02\x02\x93\x91\x03\x02\x02\x02\x93\x94\x03\x02" +
		"\x02\x02\x94\x95\x03\x02\x02\x02\x95\x96\b\x16\x04\x02\x96-\x03\x02\x02" +
		"\x02\r\x02\x0368Nby\x7F\x85\x87\x93\x05\x04\x03\x02\x04\x02\x02\b\x02" +
		"\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!BindingLanguageLexer.__ATN) {
			BindingLanguageLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(BindingLanguageLexer._serializedATN));
		}

		return BindingLanguageLexer.__ATN;
	}

}

